# Shortcuts and links used throughout the documentation.

# C++ versions:
cpp: "C&#43;&#43;"
cpp20: "C&#43;&#43;20"
cpp23: "C&#43;&#43;23"

# Latex inlines:
f2: $\mathbb{F}_2$

# Links to software tools, etc.:
mit-license: "[MIT License](https://opensource.org/license/mit)"
quarto: "[Quarto](https://quarto.org)"
repo: "[repository](https://github.com/nessan/bit)"
docs: "[documentation](https://nessan.github.io/bit)"
email: "[email](mailto:nzznfitz+gh@icloud.com)"
Eigen: "[`Eigen`](https://eigen.tuxfamily.org/overview.php?title=Main_Page)"
LAPACK: "[`LAPACK`](https://en.wikipedia.org/wiki/LAPACK)"

# Wikipedia pages:
annihilating-polynomial: "[annihilating polynomial](https://en.wikipedia.org/wiki/Minimal_polynomial_(linear_algebra))"
Bernoulli-distribution: "[Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution)"
Cayley-Hamilton: "[Cayley Hamilton](https://en.wikipedia.org/wiki/Cayley–Hamilton_theorem)"
characteristic-polynomial: "[characteristic polynomial](https://en.wikipedia.org/wiki/Characteristic_polynomial)"
co-factors: "[co-factors](https://en.wikipedia.org/wiki/Minor_(linear_algebra))"
companion-matrix: "[companion matrix](https://en.wikipedia.org/wiki/Companion_matrix)"
elementary-row-ops: "[elementary row operations](https://en.wikipedia.org/wiki/Elementary_matrix#Operations)"
Frobenius-form: "[Frobenius form](https://encyclopediaofmath.org/wiki/Frobenius_matrix)"
Galois-Field: "[Galois Field](https://en.wikipedia.org/wiki/Finite_field)"
Gaussian-elimination: "[Gaussian elimination](https://en.wikipedia.org/wiki/Gaussian_elimination)"
gf2: "[GF(2)](https://en.wikipedia.org/wiki/GF(2))"
Gram-Schmidt: "[Gram-Schmidt](https://en.wikipedia.org/wiki/Gram–Schmidt_process)"
Hessenberg: "[Hessenberg](https://en.wikipedia.org/wiki/Hessenberg_matrix)"
LU-decomposition: "[LU decomposition](https://en.wikipedia.org/wiki/lu)"
rank: "[rank](https://en.wikipedia.org/wiki/Rank_(linear_algebra))"
row-echelon-form: "[row echelon form](https://en.wikipedia.org/wiki/Row_echelon_form)"
reduced-row-echelon-form: "[reduced row echelon form](https://en.wikipedia.org/wiki/Row_echelon_form)"
similar-matrices: "[similar matrices](https://en.wikipedia.org/wiki/Matrix_similarity)"

# Other articles:
Danilevsky: "[Danilevsky's algorithm](http://web.tecnico.ulisboa.pt/~mcasquilho/compute/com/,eigen/FaddeevaDanil.pdf)"

# Formatted links to pages for items in the standard library:
std:
    allocator: "[`std::allocator`](https://en.cppreference.com/w/cpp/memory/allocator)"
    assert: "[`assert`](https://www.cplusplus.com/reference/cassert/assert/)"
    bit_ceil: "[`std::bit_ceil`](https://en.cppreference.com/w/cpp/numeric/bit_ceil)"
    bit_floor: "[`std::bit_floor`](https://en.cppreference.com/w/cpp/numeric/bit_floor)"
    bitset: "[`std::bitset`](https://en.cppreference.com/w/cpp/utility/bitset)"
    format: "[`std::format`](https://en.cppreference.com/w/cpp/utility/format/format)"
    formatter: "[`std::formatter`](https://en.cppreference.com/w/cpp/utility/format/formatter)"
    invocable: "[`std::invocable`](https://en.cppreference.com/w/cpp/concepts/invocable)"
    invalid_argument: "[`std::invalid_argument`](https://en.cppreference.com/w/cpp/error/invalid_argument)"
    nullopt: "[`std::nullopt`](https://en.cppreference.com/w/cpp/utility/optional/nullopt)"
    optional: "[`std::optional`](https://en.cppreference.com/w/cpp/utility/optiona)"
    unsigned_integral: "[`std::unsigned_integral`](https://en.cppreference.com/w/cpp/concepts/unsigned_integral)"
    vector: "[`std::vector`](https://en.cppreference.com/w/cpp/container/vector)"

# Formatted links to the Boost library:
boost:
    dynamic_bitset: "[`boost::dynamic_bitset`](https://www.boost.org/doc/libs/1_80_0/libs/dynamic_bitset/dynamic_bitset.html)"

# The top level classes etc. in the library:
bit:
    vector: "[`bit::vector`](/pages/vector/index.qmd)"
    matrix: "[`bit::matrix`](/pages/matrix/index.qmd)"
    polynomial: "[`bit::polynomial`](/pages/polynomial/index.qmd)"
    gauss: "[`bit::gauss`](/pages/gauss/index.qmd)"
    lu: "[`bit::lu`](/pages/matrix/index.qmd)"
    solve: "[`bit::solve`](/pages/gauss/solve.qmd)"
    verify: "[`bit_verify`](/pages/verify/index.qmd)"
    VERIFY: "[`bit_verify`](/pages/verify/index.qmd)"

# Formatted links to pages for the `bit::vector` methods:
vec:
    all: "[`vector::all`](/pages/vector/all.qmd)"
    allocator: "[`vector::allocator`](/pages/vector/blocks.qmd)"
    any: "[`vector::any`](/pages/vector/all.qmd)"
    append: "[`vector::append`](/pages/vector/append.qmd)"
    back: "[`vector::back`](/pages/vector/access.qmd)"
    bit_index_for: "[`vector::bit_index_for`](/pages/vector/blocks.qmd)"
    bits_per_block: "[`vector::bits_per_block`](/pages/vector/blocks.qmd)"
    block: "[`vector::block`](/pages/vector/blocks.qmd)"
    block_constructor: "[`vector::block_constructor`](/pages/vector/blocks.qmd)"
    block_count: "[`vector::block_count`](/pages/vector/blocks.qmd)"
    block_index_for: "[`vector::block_index_for`](/pages/vector/blocks.qmd)"
    block_store_type: "[`vector::block_store_type`](/pages/vector/blocks.qmd)"
    blocks: "[`vector::blocks`](/pages/vector/blocks.qmd)"
    blocks_needed: "[`vector::blocks_needed`](/pages/vector/blocks.qmd)"
    capacity: "[`vector::capacity`](/pages/vector/capacity.qmd)"
    checker_board: "[`vector::checker_board`](/pages/vector/specials.qmd)"
    clean: "[`vector::clean`](/pages/vector/blocks.qmd)"
    clear: "[`vector::clear`](/pages/vector/clear.qmd)"
    constructors: "[`vector::constructors`](/pages/vector/constructors.qmd)"
    convolution: "[`vector::convolution`](/pages/vector/convolution.qmd)"
    count: "[`vector::count`](/pages/vector/count.qmd)"
    count0: "[`vector::count0`](/pages/vector/count.qmd)"
    count1: "[`vector::count1`](/pages/vector/count.qmd)"
    description: "[`vector::description`](/pages/vector/description.qmd)"
    diff: "[`vector::diff`](/pages/vector/diff.qmd)"
    dot: "[`vector::dot`](/pages/vector/dot.qmd)"
    element: "[`vector::element`](/pages/vector/access.qmd)"
    empty: "[`vector::empty`](/pages/vector/size.qmd)"
    export_all_bits: "[`vector::export_all_bits`](/pages/vector/export_bits.qmd)"
    export_bits: "[`vector::export_bits`](/pages/vector/export_bits.qmd)"
    final_set: "[`vector::final_set`](/pages/vector/first_set.qmd)"
    first_set: "[`vector::first_set`](/pages/vector/first_set.qmd)"
    flip_if: "[`vector::flip_if`](/pages/vector/set_if.qmd)"
    flip: "[`vector::flip`](/pages/vector/set.qmd)"
    formatter: "[`vector::formatter`](/pages/vector/formatter.qmd)"
    from: "[`vector::from`](/pages/vector/from.qmd)"
    front: "[`vector::front`](/pages/vector/access.qmd)"
    if_set_call: "[`vector::if_set_call`](/pages/vector/if_set_call.qmd)"
    import_bits: "[`vector::import_bits`](/pages/vector/import_bits.qmd)"
    join: "[`vector::join`](/pages/vector/join.qmd)"
    next_set: "[`vector::next_set`](/pages/vector/first_set.qmd)"
    none: "[`vector::none`](/pages/vector/all.qmd)"
    ones: "[`vector::ones`](/pages/vector/specials.qmd)"
    operator|: "[`vector::operator|`](/pages/vector/logical-op.qmd)"
    operator|=: "[`vector::operator|=`](/pages/vector/logical-op-eq.qmd)"
    operator-: "[`vector::operator-`](/pages/vector/logical-op.qmd)"
    operator-=: "[`vector::operator-=`](/pages/vector/logical-op-eq.qmd)"
    operator(): "[`vector::operator()`](/pages/vector/access.qmd)"
    operator[]: "[`vector::operator[]`](/pages/vector/access.qmd)"
    operator*: "[`vector::operator*`](/pages/vector/logical-op.qmd)"
    operator*=: "[`vector::operator*=`](/pages/vector/logical-op-eq.qmd)"
    operator&: "[`vector::operator&`](/pages/vector/logical-op.qmd)"
    operator&=: "[`vector::operator&=`](/pages/vector/logical-op-eq.qmd)"
    operator^: "[`vector::operator^`](/pages/vector/logical-op.qmd)"
    operator^=: "[`vector::operator^=`](/pages/vector/logical-op-eq.qmd)"
    operator+: "[`vector::operator+`](/pages/vector/logical-op.qmd)"
    operator+=: "[`vector::operator+=`](/pages/vector/logical-op-eq.qmd)"
    operator<<: "[`vector::operator<<`](/pages/vector/shift.qmd)"
    operator<<=: "[`vector::operator<<=`](/pages/vector/shift.qmd)"
    operator>>: "[`vector::operator>>`](/pages/vector/shift.qmd)"
    operator>>=: "[`vector::operator>>=`](/pages/vector/shift.qmd)"
    operator~: "[`vector::operator~`](/pages/vector/logical-op-eq.qmd)"
    parity: "[`vector::parity`](/pages/vector/count.qmd)"
    pop: "[`vector::pop`](/pages/vector/push-pop.qmd)"
    prev_set: "[`vector::prev_set`](/pages/vector/first_set.qmd)"
    push: "[`vector::push`](/pages/vector/push-pop.qmd)"
    random: "[`vector::random`](/pages/vector//random.qmd)"
    reference: "[`vector::reference`](/pages/vector/reference.qmd)"
    replace: "[`vector::replace`](/pages/vector/replace.qmd)"
    reserve: "[`vector::reserve`](/pages/vector/reserve.qmd)"
    reset: "[`vector::reset`](/pages/vector/set.qmd)"
    resize: "[`vector::resize`](/pages/vector/resize.qmd)"
    riffled: "[`vector::riffled`](/pages/vector/riffled.qmd)"
    set_if: "[`vector::set_if`](/pages/vector/set_if.qmd)"
    set_indices: "[`vector::set_indices`](/pages/vector/indices.qmd)"
    set: "[`vector::set`](/pages/vector/set.qmd)"
    shrink_to_fit: "[`vector::shrink_to_fit`](/pages/vector/reserve.qmd)"
    size: "[`vector::size`](/pages/vector/size.qmd)"
    stream<<: "[`vector::stream<<`](/pages/vector/stream.qmd)"
    stream>>: "[`vector::stream>>`](/pages/vector/stream.qmd)"
    sub: "[`vector::sub`](/pages/vector/sub.qmd)"
    swap_elements: "[`vector::swap_elements`](/pages/vector/swap_elements.qmd)"
    swap: "[`vector::swap`](/pages/vector/swap.qmd)"
    test: "[`vector::test`](/pages/vector/access.qmd)"
    to_bit_order: "[`vector::to_bit_order`](/pages/vector/to_string.qmd)"
    to_hex: "[`vector::to_hex`](/pages/vector/to_string.qmd)"
    to_pretty_string: "[`vector::to_pretty_string`](/pages/vector/to_string.qmd)"
    to_string: "[`vector::to_string`](/pages/vector/to_string.qmd)"
    trimmed_left: "[`vector::trimmed_left`](/pages/vector/trimmed.qmd)"
    trimmed_right: "[`vector::trimmed_right`](/pages/vector/trimmed.qmd)"
    trimmed: "[`vector::trimmed`](/pages/vector/trimmed.qmd)"
    unit_ceil: "[`vector::unit_ceil`](/pages/vector/unit_floor.qmd)"
    unit_floor: "[`vector::unit_floor`](/pages/vector/unit_floor.qmd)"
    unit: "[`vector::unit`](/pages/vector/specials.qmd)"
    unset_indices: "[`vector::unset_indices`](/pages/vector/indices.qmd)"
    unused: "[`vector::unused`](/pages/vector/capacity.qmd)"
    zeros: "[`vector::zeros`](/pages/vector/specials.qmd)"

# Formatted links to pages for the `bit::matrix` methods:
mat:
    add_col: "[`matrix::add_col`](/pages/matrix/add-pop.qmd)"
    add_row: "[`matrix::add_row`](/pages/matrix/add-pop.qmd)"
    all: "[`matrix::all`](/pages/matrix/all.qmd)"
    any: "[`matrix::any`](/pages/matrix/all.qmd)"
    append: "[`matrix::append`](/pages/matrix/append.qmd)"
    characteristic_polynomial: "[`matrix::characteristic_polynomial`](/pages/matrix/characteristic_polynomial.qmd)"
    checker_board: "[`matrix::checker_board`](/pages/matrix/specials.qmd)"
    clear: "[`matrix::clear`](/pages/matrix/clear.qmd)"
    col: "[`matrix::col`](/pages/matrix/access.qmd)"
    col_capacity: "[`matrix::col_capacity`](/pages/matrix/capacity.qmd)"
    cols: "[`matrix::cols`](/pages/matrix/size.qmd)"
    compact_frobenius_form: "[`matrix::compact_frobenius_form`](/pages/matrix/companion.qmd)"
    companion: "[`matrix::companion`](/pages/matrix/companion.qmd)"
    constructors: "[`matrix::constructors`](/pages/matrix/constructors.qmd)"
    count: "[`matrix::count`](/pages/matrix/count.qmd)"
    count_diagonal: "[`matrix::count_diagonal`](/pages/matrix/count.qmd)"
    description: "[`matrix::description`](/pages/matrix/description.qmd)"
    dot: "[`matrix::dot`](/pages/matrix/dot.qmd)"
    echelon_form: "[`matrix::echelon_form`](/pages/matrix/echelon.qmd)"
    empty: "[`matrix::empty`](/pages/matrix/size.qmd)"
    flip: "[`matrix::flip`](/pages/matrix/set.qmd)"
    flip_diagonal: "[`matrix::flip_diagonal`](/pages/matrix/set.qmd)"
    flip_if: "[`matrix::flip_if`](/pages/matrix/set_if.qmd)"
    formatter: "[`matrix::formatter`](/pages/matrix/formatter.qmd)"
    from: "[`matrix::from`](/pages/matrix/from.qmd)"
    identity: "[`matrix::identity`](/pages/matrix/specials.qmd)"
    invert: "[`matrix::invert`](/pages/matrix/invert.qmd)"
    is_identity: "[`matrix::is_identity`](/pages/matrix/is_special.qmd)"
    is_ones: "[`matrix::is_ones`](/pages/matrix/is_special.qmd)"
    is_square: "[`matrix::is_square`](/pages/matrix/is_special.qmd)"
    is_symmetric: "[`matrix::is_symmetric`](/pages/matrix/is_special.qmd)"
    is_zero: "[`matrix::is_zero`](/pages/matrix/is_special.qmd)"
    join: "[`matrix::join`](/pages/matrix/append.qmd)"
    lower: "[`matrix::lower`](/pages/matrix/triangle.qmd)"
    none: "[`matrix::none`](/pages/matrix/all.qmd)"
    ones: "[`matrix::ones`](/pages/matrix/specials.qmd)"
    operator(): "[`matrix::operator()`](/pages/matrix/access.qmd)"
    operator[]: "[`matrix::operator[]`](/pages/matrix/access.qmd)"
    operator|: "[`matrix::operator|`](/pages/matrix/logical-op.qmd)"
    operator|=: "[`matrix::operator|=`](/pages/matrix/logical-op-eq.qmd)"
    operator-: "[`matrix::operator-`](/pages/matrix/logical-op.qmd)"
    operator-=: "[`matrix::operator-=`](/pages/matrix/logical-op-eq.qmd)"
    operator*: "[`matrix::operator*`](/pages/matrix/logical-op.qmd)"
    operator*=: "[`matrix::operator*=`](/pages/matrix/logical-op-eq.qmd)"
    operator&: "[`matrix::operator&`](/pages/matrix/logical-op.qmd)"
    operator&=: "[`matrix::operator&=`](/pages/matrix/logical-op-eq.qmd)"
    operator^: "[`matrix::operator^`](/pages/matrix/logical-op.qmd)"
    operator^=: "[`matrix::operator^=`](/pages/matrix/logical-op-eq.qmd)"
    operator+: "[`matrix::operator+`](/pages/matrix/logical-op.qmd)"
    operator+=: "[`matrix::operator+=`](/pages/matrix/logical-op-eq.qmd)"
    operator<<: "[`matrix::operator<<`](/pages/matrix/shift.qmd)"
    operator<<=: "[`matrix::operator<<=`](/pages/matrix/shift.qmd)"
    operator>>: "[`matrix::operator>>`](/pages/matrix/shift.qmd)"
    operator>>=: "[`matrix::operator>>=`](/pages/matrix/shift.qmd)"
    operator~: "[`matrix::operator~`](/pages/matrix/logical-op-eq.qmd)"
    pop_col: "[`matrix::pop_col`](/pages/matrix/add-pop.qmd)"
    pop_row: "[`matrix::pop_row`](/pages/matrix/add-pop.qmd)"
    pow: "[`matrix::pow`](/pages/matrix/pow.qmd)"
    pow2: "[`matrix::pow2`](/pages/matrix/pow.qmd)"
    print: "[`matrix::print`](/pages/matrix/print.qmd)"
    probability_invertible: "[`matrix::probability_invertible`](/pages/matrix/probability.qmd)"
    probability_singular: "[`matrix::probability_singular`](/pages/matrix/probability.qmd)"
    random: "[`matrix::random`](/pages/matrix/random.qmd)"
    reduced_echelon_form: "[`matrix::reduced_echelon_form`](/pages/matrix/echelon.qmd)"
    replace: "[`matrix::replace`](/pages/matrix/replace.qmd)"
    reset: "[`matrix::reset`](/pages/matrix/set.qmd)"
    reset_diagonal: "[`matrix::reset_diagonal`](/pages/matrix/set.qmd)"
    resize: "[`matrix::resize`](/pages/matrix/resize.qmd)"
    rotate: "[`matrix::rotate`](/pages/matrix/specials.qmd)"
    row: "[`matrix::row`](/pages/matrix/access.qmd)"
    row_capacity: "[`matrix::row_capacity`](/pages/matrix/capacity.qmd)"
    rows: "[`matrix::rows`](/pages/matrix/size.qmd)"
    set: "[`matrix::set`](/pages/matrix/set.qmd)"
    set_diagonal: "[`matrix::set_diagonal`](/pages/matrix/set.qmd)"
    set_if: "[`matrix::set_if`](/pages/matrix/set_if.qmd)"
    shift: "[`matrix::shift`](/pages/matrix/specials.qmd)"
    shrink_to_fit: "[`matrix::shrink_to_fit`](/pages/matrix/shrink_to_fit.qmd)"
    size: "[`matrix::size`](/pages/matrix/size.qmd)"
    stream<<: "[`matrix::stream<<`](/pages/matrix/stream.qmd)"
    stream>>: "[`matrix::stream>>`](/pages/matrix/stream.qmd)"
    strictly_lower: "[`matrix::strictly_lower`](/pages/matrix/triangle.qmd)"
    strictly_upper: "[`matrix::strictly_upper`](/pages/matrix/triangle.qmd)"
    sub: "[`matrix::sub`](/pages/matrix/sub.qmd)"
    swap_cols: "[`matrix::swap_cols`](/pages/matrix/swap.qmd)"
    swap_rows: "[`matrix::swap_rows`](/pages/matrix/swap.qmd)"
    test: "[`matrix::test`](/pages/matrix/access.qmd)"
    to_echelon_form: "[`matrix::to_echelon_form`](/pages/matrix/echelon.qmd)"
    to_hex: "[`matrix::to_hex`](/pages/matrix/to_string.qmd)"
    to_pretty_string: "[`matrix::to_pretty_string`](/pages/matrix/to_string.qmd)"
    to_reduced_echelon_form: "[`matrix::to_reduced_echelon_form`](/pages/matrix/echelon.qmd)"
    to_string: "[`matrix::to_string`](/pages/matrix/to_string.qmd)"
    to_transpose: "[`matrix::to_transpose`](/pages/matrix/transpose.qmd)"
    to_vector: "[`matrix::to_vector`](/pages/matrix/to_vector.qmd)"
    trace: "[`matrix::trace`](/pages/matrix/count.qmd)"
    transpose: "[`matrix::transpose`](/pages/matrix/transpose.qmd)"
    unit_lower: "[`matrix::unit_lower`](/pages/matrix/triangle.qmd)"
    unit_upper: "[`matrix::unit_upper`](/pages/matrix/triangle.qmd)"
    upper: "[`matrix::upper`](/pages/matrix/triangle.qmd)"
    zeros: "[`matrix::zeros`](/pages/matrix/specials.qmd)"

# Formatted links to pages for the `bit::gauss` methods:
gauss:
    constructors: "[`gauss::constructors`](/pages/gauss/constructors.qmd)"
    equation_count: "[`gauss::equation_count`](/pages/gauss/queries.qmd)"
    free_count: "[`gauss::free_count`](/pages/gauss/queries.qmd)"
    free_indices: "[`gauss::free_indices`](/pages/gauss/free_indices.qmd)"
    is_consistent: "[`gauss::is_consistent`](/pages/gauss/queries.qmd)"
    lhs: "[`gauss::lhs`](/pages/gauss/access.qmd)"
    operator(): "[`gauss::operator()`](/pages/gauss/functor.qmd)"
    operator(i): "[`gauss::operator(i)`](/pages/gauss/functor.qmd)"
    rank: "[`gauss::rank`](/pages/gauss/queries.qmd)"
    rhs: "[`gauss::rhs`](/pages/gauss/access.qmd)"
    solution_count: "[`gauss::solution_count`](/pages/gauss/queries.qmd)"
    solve: "[`bit::solve`](/pages/gauss/solve.qmd)"

# Formatted links to pages for the `bit::lu` methods:
lu:
    constructors: "[`lu::constructors`](/pages/lu/constructors.qmd)"
    permute: "[`lu::permute`](/pages/lu/permute.qmd)"
    permutation_vector: "[`lu::permutation_vector`](/pages/lu/permute.qmd)"
    row_swaps: "[`lu::row_swaps`](/pages/lu/permute.qmd)"
    singular: "[`lu::singular`](/pages/lu/queries.qmd)"
    non_singular: "[`lu::non_singular`](/pages/lu/queries.qmd)"
    determinant: "[`lu::determinant`](/pages/lu/queries.qmd)"
    rank: "[`lu::rank`](/pages/lu/queries.qmd)"
    L: "[`lu::L`](/pages/lu/access.qmd)"
    U: "[`lu::U`](/pages/lu/access.qmd)"
    LU: "[`lu::LU`](/pages/lu/access.qmd)"
    operator(): "[`lu::operator()`](/pages/lu/functor.qmd)"
    invert: "[`lu::invert`](/pages/lu/invert.qmd)"

# Formatted links to pages for the `bit::polynomial` methods:
poly:
    capacity: "[`polynomial::capacity`](/pages/polynomial/size.qmd)"
    clear: "[`polynomial::clear`](/pages/polynomial/size.qmd)"
    coefficients: "[`polynomial::coefficients`](/pages/polynomial/access.qmd)"
    constant: "[`polynomial::constant`](/pages/polynomial/special.qmd)"
    constructors: "[`polynomial::constructors`](/pages/polynomial/constructors.qmd)"
    count0: "[`polynomial::count0`](/pages/polynomial/count.qmd)"
    count1: "[`polynomial::count1`](/pages/polynomial/count.qmd)"
    degree: "[`polynomial::degree`](/pages/polynomial/degree.qmd)"
    empty: "[`polynomial::empty`](/pages/polynomial/size.qmd)"
    formatter: "[`polynomial::formatter`](/pages/polynomial/formatter.qmd)"
    get: "[`polynomial::get`](/pages/polynomial/access.qmd)"
    make_monic: "[`polynomial::make_monic`](/pages/polynomial/monic.qmd)"
    monic: "[`polynomial::monic`](/pages/polynomial/monic.qmd)"
    nonzero: "[`polynomial::nonzero`](/pages/polynomial/special.qmd)"
    one: "[`polynomial::one`](/pages/polynomial/special.qmd)"
    operator-: "[`polynomial::operator-`](/pages/polynomial/arithmetic.qmd)"
    operator-=: "[`polynomial::operator-=`](/pages/polynomial/arithmetic.qmd)"
    operator(): "[`polynomial::operator()`](/pages/polynomial/evaluation.qmd)"
    operator[]: "[`polynomial::operator[]`](/pages/polynomial/access.qmd)"
    operator*: "[`polynomial::operator*`](/pages/polynomial/arithmetic.qmd)"
    operator*=: "[`polynomial::operator*=`](/pages/polynomial/arithmetic.qmd)"
    operator+: "[`polynomial::operator+`](/pages/polynomial/arithmetic.qmd)"
    operator+=: "[`polynomial::operator+=`](/pages/polynomial/arithmetic.qmd)"
    power: "[`polynomial::power`](/pages/polynomial/power.qmd)"
    random: "[`polynomial::random`](/pages/polynomial/random.qmd)"
    reduce: "[`polynomial::reduce`](/pages/polynomial/reduce.qmd)"
    reference: "[`polynomial::reference`](/pages/polynomial/reference.qmd)"
    reset: "[`polynomial::reset`](/pages/polynomial/access.qmd)"
    resize: "[`polynomial::resize`](/pages/polynomial/size.qmd)"
    set: "[`polynomial::set`](/pages/polynomial/access.qmd)"
    set_coefficients: "[`polynomial::set_coefficients`](/pages/polynomial/access.qmd)"
    shrink_to_fit: "[`polynomial::shrink_to_fit`](/pages/polynomial/shrink_to_fit.qmd)"
    size: "[`polynomial::size`](/pages/polynomial/size.qmd)"
    split: "[`polynomial::split`](/pages/polynomial/split.qmd)"
    squared: "[`polynomial::squared`](/pages/polynomial/squared.qmd)"
    stream>>: "[`polynomial::stream>>`](/pages/polynomial/stream.qmd)"
    sub: "[`polynomial::sub`](/pages/polynomial/sub.qmd)"
    times_x: "[`polynomial::times_x`](/pages/polynomial/times_x.qmd)"
    to_string: "[`polynomial::to_string`](/pages/polynomial/to_string.qmd)"
    zero: "[`polynomial::zero`](/pages/polynomial/special.qmd)"
