---
title: "`bit::matrix` --- Polynomial Sum of a Bit-Matrix"
---

{{< include /content/_common.qmd >}}

Non-member function that evaluates a polynomial over $\FF$ using a _square_ bit-matrix as the argument.

```cpp
template<std::unsigned_integral Block, typename Allocator>
constexpr matrix<Block, Allocator>
polynomial_sum(const vector<Block, Allocator> &p, const matrix<Block, Allocator> &M);
```

The polynomial coefficients are stored in the bit-vector `p`. \
The function returns the value of the polynomial for the argument `M` where `M` is a _square_ bit-matrix:
$$
p(M) = p_0 I + p_1 M + p_2 M^2 + \cdots + p_{n-1} M^{n-1}.
$$
`I` is the identity matrix with identical dimensions to `M`.
The sum uses [Horner's method](https://en.wikipedia.org/wiki/Horner%27s_method).

::: {.callout-warning}
# The bit-matrix argument must be square
The input matrix must be square, and the [`bit_assert`] macro checks that pre-condition.
Setting the `BIT_NDEBUG` flag at compile time turns off that check.
:::

[Example]{.bt}
```cpp
#include <bit/bit.h>
int main()
{
    bit::vector p(16, [](size_t k) { return (k + 1) % 2; });
    bit::vector q(17, [](size_t k) { return (k + 1) % 2; });
    auto M = bit::matrix<>::identity(6);
    std::cout << "Bit-matrix M:\n" << M           << '\n';
    std::cout << "p(M): " << p.to_polynomial("M") << '\n';
    std::cout << polynomial_sum(p, M)             << '\n';
    std::cout << "q(M): " << q.to_polynomial("M") << '\n';
    std::cout << polynomial_sum(q, M)             << '\n';
}
```

[Output]{.bt}
```bash
Bit-matrix M:
│1 0 0 0 0 0│
│0 1 0 0 0 0│
│0 0 1 0 0 0│
│0 0 0 1 0 0│
│0 0 0 0 1 0│
│0 0 0 0 0 1│
p(M): 1 + M^2 + M^4 + M^6 + M^8 + M^10 + M^12 + M^14
│0 0 0 0 0 0│
│0 0 0 0 0 0│
│0 0 0 0 0 0│
│0 0 0 0 0 0│
│0 0 0 0 0 0│
│0 0 0 0 0 0│
q(M): 1 + M^2 + M^4 + M^6 + M^8 + M^10 + M^12 + M^14 + M^16
│1 0 0 0 0 0│
│0 1 0 0 0 0│
│0 0 1 0 0 0│
│0 0 0 1 0 0│
│0 0 0 0 1 0│
│0 0 0 0 0 1│
```

### See Also
[`matrix::pow`] \
[`matrix::pow2`]
