---
title: "`bit::matrix` --- Is a Bit-Matrix Special?"
---

{{< include /content/_common.qmd >}}

Check to see if this bit-matrix is "special" in some way.

```cpp
constexpr bool is_zero() const;       //  <1>
constexpr bool is_ones() const;       //  <2>
constexpr bool is_identity() const;   //  <3>
constexpr bool is_square()   const;   //  <4>
constexpr bool is_symmetric() const;  //  <5>
```
1. Are all the bit-matrix elements *all* 0?
2. Are all the bit-matrix elements *all* 1?
3. Is this bit-matrix square?
Empty bit-matrices are **NOT** considered to be square.
4. Is this the identity bit-matrix?
5. Is this the bit-matrix symmetric (must be square)

[Example]{.bt}
```cpp
#include <bit/bit.h>
int main()
{
    auto ident = bit::matrix<>::identity(8);

    // Little lambda that turns a bool into a string
    auto b2s = [](bool x) { return x ? "YES" : "NO"; };

    std::cout << "bit-matrix is_zero?      " << b2s(ident.is_zero())      << "\n";
    std::cout << "bit-matrix is_ones?      " << b2s(ident.is_ones())      << "\n";
    std::cout << "bit-matrix is_identity?  " << b2s(ident.is_identity())  << "\n";
    std::cout << "bit-matrix is_square?    " << b2s(ident.is_square())    << '\n';
    std::cout << "bit-matrix is_symmetric? " << b2s(ident.is_symmetric()) << "\n";
}
```
[Output]{.bt}
```bash
bit-matrix is_zero?      NO
bit-matrix is_ones?      NO
bit-matrix is_identity?  YES
bit-matrix is_square?    YES
bit-matrix is_symmetric? YES
```

### See Also
[`matrix::ones`]  \
[`matrix::zeros`] \
[`matrix::identity`]
