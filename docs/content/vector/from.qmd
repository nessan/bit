---
title: "`bit::vector` --- Factory Constructors"
---

{{< include /content/_common.qmd >}}

## From Unsigned Integers

We can always copy the bits of _any_ unsigned integer value to create a valid bit-vector.
```cpp
static constexpr bit::vector from(std::unsigned_integral auto src); // <1>
```
1. This templated method returns a bit-vector constructed from the bits that make up the `src` word.

The size of the bit-vector will be the `std::sizeof` for the specific `std::unsigned_integral` used as the argument.
Note that there is _no_ requirement for the argument type and `Block` to be the same.
The argument might be a 32-bit unsigned, creating a bit-vector of size 32 packed into the default 64-bit block.

::: {.callout-note}
# Why not a constructor with this argument type?
This method isn't a constructor because we don't want `src` to be treated as the _number_ of vector elements.
Instead, we copy the actual _bits_ from `src` into the bit-vector.
:::

[Example]{.bt}
```cpp
#include <bit/bit.h>
int main()
{
    uint16_t val = 65535;
    auto v1 = bit::vector<>::from(val);
    std::cout << "v1 = " << v1 << " has size " << v1.size() << '\n';
}
```

[Output]{.bt}
```bash
v1 = [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1] has size 16
```

## From Strings

We provide a factory method that attempts to parse a string as a bit-vector.

Of course, that isn't always possible, so this method returns a [`std::optional`]
```cpp
static std::optional<bit::vector>
from(std::string_view src, bool bit_order = false);   // <1>
```
1. Attempts to parse a bit-vector from a string and returns `std::nullopt` on failure.

{{< include _encoding.qmd >}}

##### Binary String Example:
```cpp
#include <bit/bit.h>
int main()
{
    auto v1 = bit::vector<>::from("11100");         // <1>
    auto v2 = bit::vector<>::from("11100", true);   // <2>
    auto v3 = bit::vector<>::from("1  1  1");       // <3>

    std::cout << "v1 = " << (v2 ? v2->to_string() : "FAILED TO PARSE") << '\n';
    std::cout << "v2 = " << (v3 ? v3->to_string() : "FAILED TO PARSE") << '\n';
    std::cout << "v3 = " << (v4 ? v4->to_string() : "FAILED TO PARSE") << '\n';
}
```
1. The string without a prefix is all zeros and ones, so we _assume_ it's a binary encoding.
2. This is the same thing, but now we interpret the bits as having the least significant bit v~0~ is on the right.
3. This is a string with a deliberate error.

[Output]{.bt}
```bash
v1 = 11100
v2 = 00111              # <1>
v3 = FAILED TO PARSE    # <2>
```
1. The characters are interpreted as encoding the least significant bit v~0~ is on the right.
2. The last string cannot be interpreted as a valid bit-vector.

##### Hex String Example
```cpp
#include <bit/bit.h>
int main()
{
    auto v1 = bit::vector<>::from("111");     // <1>
    auto v2 = bit::vector<>::from("0x111");   // <2>
    auto v3 = bit::vector<>::from("0xF1");    // <3>
    auto v4 = bit::vector<>::from("0xF1_8");  // <4>
    auto v5 = bit::vector<>::from("0xF1_4");  // <5>
    auto v6 = bit::vector<>::from("0xF1_2");  // <6>

    if(v1) std::cout << "v1 = " << *v1 << '\n';
    if(v2) std::cout << "v2 = " << *v2 << '\n';
    if(v3) std::cout << "v3 = " << *v3 << '\n';
    if(v4) std::cout << "v4 = " << *v4 << '\n';
    if(v5) std::cout << "v5 = " << *v5 << '\n';
    if(v6) std::cout << "v6 = " << *v6 << '\n';
}
```
1. This string without a prefix is all zeros and ones, so we _assume_ it's a binary encoding.
2. This string has the same digits, but thanks to the '0x' prefix, it will be interpreted as a hex string.
3. Construction where the final character has no suffix, so by default, it is parsed as a hex/base-16 number.
4. Construction where the final character has a suffix `"_8"` so is parsed as a base-8 number.
5. Construction where the final character has a suffix `"_4"` so is parsed as a base-4 number.
6. Construction where the final character has a suffix `"_2"` so is parsed as a base-2 number.

[Output]{.bt}
```bash
v1 = [1 1 1]                        # <1>
v2 = [1 0 0 0 1 0 0 0 1 0 0 0]      # <2>
v3 = [1 1 1 1 1 0 0 0]              # <3>
v4 = [1 1 1 1 1 0 0]                # <4>
v5 = [1 1 1 1 1 0]                  # <5>
v6 = [1 1 1 1 1]                    # <6>
```
1. Binary string so each character is a single element in the bit-vector.
2. Same digits, but now it is hex, so each character is four elements in the bit-vector.
3. The final `1` is interpreted as 1 base 16.
4. The final `1_8` is interpreted as 1 base 8.
5. The final `1_4` is interpreted as 1 base 4.
6. The final `1_2` is interpreted as 1 base 2.

### See Also
[`vector::constructors`] \
[`vector::to_string`]
